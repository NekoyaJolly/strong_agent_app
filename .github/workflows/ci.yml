name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging, master, refactor/* ]
  pull_request:
    branches: [ main, develop, staging, master ]

env:
  NODE_VERSION: '22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  # =====================================
  # 品質チェック & テスト
  # =====================================
  test-and-quality:
    name: 🔍 Quality Check & Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci --ignore-scripts
      
      - name: 🔍 ESLint check
        run: npm run lint
      
      - name: 🔍 TypeScript type check
        run: npm run type-check
      
      - name: 🧪 Run tests with coverage
        run: npm run test:coverage
      
      - name: 🏗️ Build project
        run: npm run build
      
      - name: 📊 Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
      
      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            package-lock.json

  # =====================================
  # Docker Image ビルド & プッシュ
  # =====================================
  build-and-docker:
    name: 🐳 Docker Build & Push
    needs: test-and-quality
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging')
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci --ignore-scripts
      
      - name: 🏗️ Build application
        run: npm run build
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  # =====================================
  # セキュリティスキャン
  # =====================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test-and-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci --ignore-scripts

      - name: 🔒 Run npm audit
        run: npm audit --audit-level=moderate || true

      - name: 🔒 Run dependency check
        run: |
          echo "📊 Dependency analysis:"
          npm ls --depth=0
          echo "📊 Outdated packages:"
          npm outdated || true
